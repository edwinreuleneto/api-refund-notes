generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Files
model Files {
  id        String @id @default(uuid())
  name      String
  extension String
  baseUrl   String
  folder    String
  file      String
  url       String @unique
  size      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TaxCoupon TaxCoupon[]
  FilesOcr  FilesOcr[]

  @@index([id, createdAt(sort: Desc)])
}

model FilesOcr {
  id     String @id @default(uuid())
  fileId String
  file   Files  @relation(fields: [fileId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files_ocr")
}

// Tax Coupon
model TaxCoupon {
  id     String          @id @default(uuid())
  status TaxCouponStatus @default(UPLOAD)
  fileId String
  file   Files           @relation(fields: [fileId], references: [id], onDelete: Cascade)

  ai     TaxCouponAi[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupons")
}

model TaxCouponAi {
  id          String    @id @default(uuid())
  taxCouponId String
  taxCoupon   TaxCoupon @relation(fields: [taxCouponId], references: [id], onDelete: Cascade)

  establishment TaxCouponAiEstablishment?
  document      TaxCouponAiDocument?
  totals        TaxCouponAiTotals?
  customer      TaxCouponAiCustomer?
  items         TaxCouponAiItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupon_ai")
}

model TaxCouponAiEstablishment {
  id            String      @id @default(uuid())
  taxCouponAiId String      @unique
  taxCouponAi   TaxCouponAi @relation(fields: [taxCouponAiId], references: [id], onDelete: Cascade)

  name              String?
  cnpj              String?
  stateRegistration String? @map("state_registration")

  addressStreet       String? @map("address_street")
  addressNumber       String? @map("address_number")
  addressComplement   String? @map("address_complement")
  addressNeighborhood String? @map("address_neighborhood")
  addressCity         String? @map("address_city")
  addressState        String? @map("address_state")
  addressPostalCode   String? @map("address_postal_code")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupon_ai_establishment")
}

model TaxCouponAiDocument {
  id            String      @id @default(uuid())
  taxCouponAiId String      @unique
  taxCouponAi   TaxCouponAi @relation(fields: [taxCouponAiId], references: [id], onDelete: Cascade)

  type        String?
  description String?
  series      String?
  number      String?
  issueDate   DateTime? @map("issue_date")
  accessKey   String?   @map("access_key")
  consultUrl  String?   @map("consult_url")
  receiptUrl  String?   @map("receipt_url")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupon_ai_document")
}

model TaxCouponAiItem {
  id            String      @id @default(uuid())
  taxCouponAiId String
  taxCouponAi   TaxCouponAi @relation(fields: [taxCouponAiId], references: [id], onDelete: Cascade)

  code           String?
  description    String?
  quantity       Float?
  unit           String?
  unitPrice      Float? @map("unit_price")
  totalPrice     Float? @map("total_price")
  categorySystem String? @map("category_system")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupon_ai_item")
}

model TaxCouponAiTotals {
  id            String      @id @default(uuid())
  taxCouponAiId String      @unique
  taxCouponAi   TaxCouponAi @relation(fields: [taxCouponAiId], references: [id], onDelete: Cascade)

  totalItems    Int?    @map("total_items")
  subtotal      Float?
  total         Float?
  paymentMethod String? @map("payment_method")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupon_ai_totals")
}

model TaxCouponAiCustomer {
  id            String      @id @default(uuid())
  taxCouponAiId String      @unique
  taxCouponAi   TaxCouponAi @relation(fields: [taxCouponAiId], references: [id], onDelete: Cascade)

  identified Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_coupon_ai_customer")
}

enum TaxCouponStatus {
  UPLOAD
  TEXTRACT_INITIATED
  TEXTRACT_COMPLETED
  AI_INITIATED
  AI_COMPLETED
  COMPLETED
  FAILED
}
